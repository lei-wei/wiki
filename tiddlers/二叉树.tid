created: 20220324083143135
creator: 胖虎
modified: 20220426073659478
modifier: 胖虎
tags: 数据结构
title: 二叉树
tmap.id: 37140493-429e-4b7e-aa75-634c6f22bbda
type: text/vnd.tiddlywiki


参考资料：[[http://data.biancheng.net/tree/]]

! 1.树结构与二叉树

!! 树
一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。

树（Tree）是n（n>=0)个结点的有限集。n=0时称为空树。在任意一颗非空树中：

* 1）有且仅有一个特定的称为根（Root）的结点；
* 2）当n>1时，其余结点可分为m(m>0)个互不相交的有限集T1、T2、......、Tn，其中每一个集合本身又是一棵树，并且称为根的子树

节点的度：结点拥有的子树数目称为结点的度

树的节点组成：

* 根节点：唯一
* 分支结点：子树的根节点
* 叶子节点、叶节点，即度为0的节点

结点关系：

* 双亲结点
* 孩子节点、子节点
* 兄弟节点（有同样的双亲节点）

!! 二叉树

满足以下两个条件

* 有序树：左子树和右子树是有顺序的，次序不能任意颠倒，即使树中某结点只有一棵子树，也要区分它是左子树还是右子树
* 每个结点最多有两颗子树，即二叉树中节点的度不能大于2

满二叉树：如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。

完全二叉树：如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。


! 2.二叉树存储结构

!!! 1. 顺序存储结构，即将其补齐转化为完全二叉树，再按层遍历转化为数组进行存储。缺陷是补齐空节点造成大量空间浪费。

!!! 2. 链式存储结构，与链表原理类似
附上cpp构造代码：

```cpp
// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
```

拓展：三叉链表：可以在节点结构中再添加一个指针域，用于指向其父亲节点

! 3.二叉树的三种遍历方式

* 先序遍历、前序遍历：从二叉树的根结点出发，当第一次到达结点时访问该节点元素，再按照先向左在向右的方向访问。
* 中序遍历：从二叉树的根结点出发，先访问左子树，再访问该节点元素，再访问右子树
* 后序遍历：从根节点出发，依次遍历各节点的左右子树，直到当前节点左右子树遍历完成后，才访问该节点元素
* 层次遍历、层序遍历：按照树的层次自上而下的遍历二叉树

! 4.相关题目

<<list-links "[tag[二叉树]sort[title]]">>

